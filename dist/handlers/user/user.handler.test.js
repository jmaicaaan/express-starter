'use strict';

var assert = require('assert');
var app = require('../../../dist/app');
var models = require('../../../models');
var bluebird = require('bluebird');
var server = require('supertest')(app);

describe('#User', function () {
  var createdUser = void 0;
  before(function () {
    return models.sequelize.sync().then(function () {
      return bluebird.all([models.accessToken.destroy({ truncate: true }), models.User.destroy({ truncate: true })]);
    }).then(function () {
      return models.User.create({ username: 'user123', password: 'Password123' }).then(function (user) {
        return user.get();
      });
    }).then(function (user) {
      createdUser = user;
    });
  });

  describe('#User Creation', function () {
    it('should add a user', function (done) {
      var username = 'JM Santos';
      server.post('/user/').send({ username: username }).expect(200).end(function (err, res) {
        assert.equal(res.body.username, username);
        done(err);
      });
    });
  });

  describe('#User Login', function () {
    it('should allow user to login', function (done) {
      server.post('/user/login').send({ username: createdUser.username, password: createdUser.password }).expect(200).end(function (err, res) {
        assert.equal(res.body.username, createdUser.username);
        done(err);
      });
    });
  });

  describe('#User Me', function () {
    var createdUser = void 0;
    var accessToken = void 0;
    before(function () {
      return models.User.create({
        username: 'user-test-' + Date.now(),
        password: 'Password123'
      }).then(function (user) {
        createdUser = user;
        return server.post('/user/login').send({ username: createdUser.username, password: createdUser.password }).then(function (res) {
          accessToken = res.body.accessToken.token;
        });
      });
    });
    it('should not allow unauthorized to access /user/me', function (done) {
      server.get('/user/me').expect(401).end(function (err, res) {
        done(err);
      });
    });
    it('should not allow authorized to access /user/me', function (done) {
      server.get('/user/me').set('Authorization', accessToken).expect(200).end(function (err, res) {
        assert.equal(res.body.username, createdUser.username);
        done(err);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9oYW5kbGVycy91c2VyL3VzZXIuaGFuZGxlci50ZXN0LmpzIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJhcHAiLCJtb2RlbHMiLCJibHVlYmlyZCIsInNlcnZlciIsImRlc2NyaWJlIiwiY3JlYXRlZFVzZXIiLCJiZWZvcmUiLCJzZXF1ZWxpemUiLCJzeW5jIiwidGhlbiIsImFsbCIsImFjY2Vzc1Rva2VuIiwiZGVzdHJveSIsInRydW5jYXRlIiwiVXNlciIsImNyZWF0ZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1c2VyIiwiZ2V0IiwiaXQiLCJkb25lIiwicG9zdCIsInNlbmQiLCJleHBlY3QiLCJlbmQiLCJlcnIiLCJyZXMiLCJlcXVhbCIsImJvZHkiLCJEYXRlIiwibm93IiwidG9rZW4iLCJzZXQiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsU0FBU0MsUUFBUSxRQUFSLENBQWY7QUFDQSxJQUFNQyxNQUFNRCxRQUFRLG1CQUFSLENBQVo7QUFDQSxJQUFNRSxTQUFTRixRQUFRLGlCQUFSLENBQWY7QUFDQSxJQUFNRyxXQUFXSCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxJQUFNSSxTQUFTSixRQUFRLFdBQVIsRUFBcUJDLEdBQXJCLENBQWY7O0FBRUFJLFNBQVMsT0FBVCxFQUFrQixZQUFNO0FBQ3RCLE1BQUlDLG9CQUFKO0FBQ0FDLFNBQU8sWUFBTTtBQUNYLFdBQU9MLE9BQU9NLFNBQVAsQ0FBaUJDLElBQWpCLEdBQ0pDLElBREksQ0FDQyxZQUFNO0FBQ1YsYUFBT1AsU0FBU1EsR0FBVCxDQUFhLENBQ2xCVCxPQUFPVSxXQUFQLENBQW1CQyxPQUFuQixDQUEyQixFQUFFQyxVQUFVLElBQVosRUFBM0IsQ0FEa0IsRUFFbEJaLE9BQU9hLElBQVAsQ0FBWUYsT0FBWixDQUFvQixFQUFFQyxVQUFVLElBQVosRUFBcEIsQ0FGa0IsQ0FBYixDQUFQO0FBSUQsS0FOSSxFQU9KSixJQVBJLENBT0MsWUFBTTtBQUNWLGFBQU9SLE9BQU9hLElBQVAsQ0FBWUMsTUFBWixDQUFtQixFQUFFQyxVQUFVLFNBQVosRUFBdUJDLFVBQVUsYUFBakMsRUFBbkIsRUFDSlIsSUFESSxDQUNDO0FBQUEsZUFBUVMsS0FBS0MsR0FBTCxFQUFSO0FBQUEsT0FERCxDQUFQO0FBRUQsS0FWSSxFQVdKVixJQVhJLENBV0MsVUFBQ1MsSUFBRCxFQUFVO0FBQ2RiLG9CQUFjYSxJQUFkO0FBQ0QsS0FiSSxDQUFQO0FBY0QsR0FmRDs7QUFpQkFkLFdBQVMsZ0JBQVQsRUFBMkIsWUFBTTtBQUMvQmdCLE9BQUcsbUJBQUgsRUFBd0IsVUFBQ0MsSUFBRCxFQUFVO0FBQ2hDLFVBQUlMLFdBQVcsV0FBZjtBQUNBYixhQUNHbUIsSUFESCxDQUNRLFFBRFIsRUFFR0MsSUFGSCxDQUVRLEVBQUVQLGtCQUFGLEVBRlIsRUFHR1EsTUFISCxDQUdVLEdBSFYsRUFJR0MsR0FKSCxDQUlPLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ2pCN0IsZUFBTzhCLEtBQVAsQ0FBYUQsSUFBSUUsSUFBSixDQUFTYixRQUF0QixFQUFnQ0EsUUFBaEM7QUFDQUssYUFBS0ssR0FBTDtBQUNELE9BUEg7QUFRRCxLQVZEO0FBV0QsR0FaRDs7QUFjQXRCLFdBQVMsYUFBVCxFQUF3QixZQUFNO0FBQzVCZ0IsT0FBRyw0QkFBSCxFQUFpQyxVQUFDQyxJQUFELEVBQVU7QUFDekNsQixhQUNHbUIsSUFESCxDQUNRLGFBRFIsRUFFR0MsSUFGSCxDQUVRLEVBQUVQLFVBQVVYLFlBQVlXLFFBQXhCLEVBQWtDQyxVQUFVWixZQUFZWSxRQUF4RCxFQUZSLEVBR0dPLE1BSEgsQ0FHVSxHQUhWLEVBSUdDLEdBSkgsQ0FJTyxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNqQjdCLGVBQU84QixLQUFQLENBQWFELElBQUlFLElBQUosQ0FBU2IsUUFBdEIsRUFBZ0NYLFlBQVlXLFFBQTVDO0FBQ0FLLGFBQUtLLEdBQUw7QUFDRCxPQVBIO0FBUUQsS0FURDtBQVVELEdBWEQ7O0FBYUF0QixXQUFTLFVBQVQsRUFBcUIsWUFBTTtBQUN6QixRQUFJQyxvQkFBSjtBQUNBLFFBQUlNLG9CQUFKO0FBQ0FMLFdBQU8sWUFBTTtBQUNYLGFBQU9MLE9BQU9hLElBQVAsQ0FBWUMsTUFBWixDQUFtQjtBQUN4QkMsa0JBQVUsZUFBZWMsS0FBS0MsR0FBTCxFQUREO0FBRXhCZCxrQkFBVTtBQUZjLE9BQW5CLEVBSU5SLElBSk0sQ0FJRCxVQUFDUyxJQUFELEVBQVU7QUFDZGIsc0JBQWNhLElBQWQ7QUFDQSxlQUFPZixPQUNKbUIsSUFESSxDQUNDLGFBREQsRUFFSkMsSUFGSSxDQUVDLEVBQUVQLFVBQVVYLFlBQVlXLFFBQXhCLEVBQWtDQyxVQUFVWixZQUFZWSxRQUF4RCxFQUZELEVBR0pSLElBSEksQ0FHQyxVQUFDa0IsR0FBRCxFQUFTO0FBQ2JoQix3QkFBY2dCLElBQUlFLElBQUosQ0FBU2xCLFdBQVQsQ0FBcUJxQixLQUFuQztBQUNELFNBTEksQ0FBUDtBQU1ELE9BWk0sQ0FBUDtBQWFELEtBZEQ7QUFlQVosT0FBRyxrREFBSCxFQUF1RCxVQUFDQyxJQUFELEVBQVU7QUFDL0RsQixhQUNHZ0IsR0FESCxDQUNPLFVBRFAsRUFFR0ssTUFGSCxDQUVVLEdBRlYsRUFHR0MsR0FISCxDQUdPLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ2pCTixhQUFLSyxHQUFMO0FBQ0QsT0FMSDtBQU1ELEtBUEQ7QUFRQU4sT0FBRyxnREFBSCxFQUFxRCxVQUFDQyxJQUFELEVBQVU7QUFDN0RsQixhQUNHZ0IsR0FESCxDQUNPLFVBRFAsRUFFR2MsR0FGSCxDQUVPLGVBRlAsRUFFd0J0QixXQUZ4QixFQUdHYSxNQUhILENBR1UsR0FIVixFQUlHQyxHQUpILENBSU8sVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDakI3QixlQUFPOEIsS0FBUCxDQUFhRCxJQUFJRSxJQUFKLENBQVNiLFFBQXRCLEVBQWdDWCxZQUFZVyxRQUE1QztBQUNBSyxhQUFLSyxHQUFMO0FBQ0QsT0FQSDtBQVFELEtBVEQ7QUFVRCxHQXBDRDtBQXFDRCxDQW5GRCIsImZpbGUiOiJ1c2VyLmhhbmRsZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xyXG5jb25zdCBhcHAgPSByZXF1aXJlKCcuLi8uLi8uLi9kaXN0L2FwcCcpO1xyXG5jb25zdCBtb2RlbHMgPSByZXF1aXJlKCcuLi8uLi8uLi9tb2RlbHMnKTtcclxuY29uc3QgYmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xyXG5jb25zdCBzZXJ2ZXIgPSByZXF1aXJlKCdzdXBlcnRlc3QnKShhcHApO1xyXG5cclxuZGVzY3JpYmUoJyNVc2VyJywgKCkgPT4ge1xyXG4gIGxldCBjcmVhdGVkVXNlcjtcclxuICBiZWZvcmUoKCkgPT4ge1xyXG4gICAgcmV0dXJuIG1vZGVscy5zZXF1ZWxpemUuc3luYygpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gYmx1ZWJpcmQuYWxsKFtcclxuICAgICAgICAgIG1vZGVscy5hY2Nlc3NUb2tlbi5kZXN0cm95KHsgdHJ1bmNhdGU6IHRydWUgfSksXHJcbiAgICAgICAgICBtb2RlbHMuVXNlci5kZXN0cm95KHsgdHJ1bmNhdGU6IHRydWUgfSlcclxuICAgICAgICBdKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBtb2RlbHMuVXNlci5jcmVhdGUoeyB1c2VybmFtZTogJ3VzZXIxMjMnLCBwYXNzd29yZDogJ1Bhc3N3b3JkMTIzJyB9KVxyXG4gICAgICAgICAgLnRoZW4odXNlciA9PiB1c2VyLmdldCgpKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgICBjcmVhdGVkVXNlciA9IHVzZXI7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnI1VzZXIgQ3JlYXRpb24nLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGFkZCBhIHVzZXInLCAoZG9uZSkgPT4ge1xyXG4gICAgICBsZXQgdXNlcm5hbWUgPSAnSk0gU2FudG9zJztcclxuICAgICAgc2VydmVyXHJcbiAgICAgICAgLnBvc3QoJy91c2VyLycpXHJcbiAgICAgICAgLnNlbmQoeyB1c2VybmFtZSB9KVxyXG4gICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzLmJvZHkudXNlcm5hbWUsIHVzZXJuYW1lKTtcclxuICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnI1VzZXIgTG9naW4nLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGFsbG93IHVzZXIgdG8gbG9naW4nLCAoZG9uZSkgPT4ge1xyXG4gICAgICBzZXJ2ZXJcclxuICAgICAgICAucG9zdCgnL3VzZXIvbG9naW4nKVxyXG4gICAgICAgIC5zZW5kKHsgdXNlcm5hbWU6IGNyZWF0ZWRVc2VyLnVzZXJuYW1lLCBwYXNzd29yZDogY3JlYXRlZFVzZXIucGFzc3dvcmQgfSlcclxuICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlcy5ib2R5LnVzZXJuYW1lLCBjcmVhdGVkVXNlci51c2VybmFtZSk7XHJcbiAgICAgICAgICBkb25lKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJyNVc2VyIE1lJywgKCkgPT4ge1xyXG4gICAgbGV0IGNyZWF0ZWRVc2VyO1xyXG4gICAgbGV0IGFjY2Vzc1Rva2VuO1xyXG4gICAgYmVmb3JlKCgpID0+IHtcclxuICAgICAgcmV0dXJuIG1vZGVscy5Vc2VyLmNyZWF0ZSh7XHJcbiAgICAgICAgdXNlcm5hbWU6ICd1c2VyLXRlc3QtJyArIERhdGUubm93KCksXHJcbiAgICAgICAgcGFzc3dvcmQ6ICdQYXNzd29yZDEyMydcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgICBjcmVhdGVkVXNlciA9IHVzZXI7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZlclxyXG4gICAgICAgICAgLnBvc3QoJy91c2VyL2xvZ2luJylcclxuICAgICAgICAgIC5zZW5kKHsgdXNlcm5hbWU6IGNyZWF0ZWRVc2VyLnVzZXJuYW1lLCBwYXNzd29yZDogY3JlYXRlZFVzZXIucGFzc3dvcmQgfSlcclxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSByZXMuYm9keS5hY2Nlc3NUb2tlbi50b2tlbjtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgdW5hdXRob3JpemVkIHRvIGFjY2VzcyAvdXNlci9tZScsIChkb25lKSA9PiB7XHJcbiAgICAgIHNlcnZlclxyXG4gICAgICAgIC5nZXQoJy91c2VyL21lJylcclxuICAgICAgICAuZXhwZWN0KDQwMSlcclxuICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgZG9uZShlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyBhdXRob3JpemVkIHRvIGFjY2VzcyAvdXNlci9tZScsIChkb25lKSA9PiB7XHJcbiAgICAgIHNlcnZlclxyXG4gICAgICAgIC5nZXQoJy91c2VyL21lJylcclxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYWNjZXNzVG9rZW4pXHJcbiAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcclxuICAgICAgICAgIGFzc2VydC5lcXVhbChyZXMuYm9keS51c2VybmFtZSwgY3JlYXRlZFVzZXIudXNlcm5hbWUpO1xyXG4gICAgICAgICAgZG9uZShlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyJdfQ==