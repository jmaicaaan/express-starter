'use strict';

var assert = require('assert');
var app = require('../../../dist/app');
var models = require('../../../models');
var bluebird = require('bluebird');
var server = require('supertest')(app);

describe('#User', function () {
  var createdUser = void 0;
  before(function () {
    return models.sequelize.sync().then(function () {
      return bluebird.all([models.User.destroy({ truncate: true })]);
    }).then(function () {
      return models.User.create({ username: 'user123', password: 'Password123' }).then(function (user) {
        return user.get();
      });
    }).then(function (user) {
      createdUser = user;
    });
  });

  describe('#User Creation', function () {
    it('should add a user', function (done) {
      var username = 'JM Santos';
      server.post('/user/').send({ username: username }).expect(200).end(function (err, res) {
        assert.equal(res.body.username, username);
        done(err);
      });
    });
  });

  describe('#User Login', function () {
    it('should allow user to login', function (done) {
      server.post('/user/login').send({ username: createdUser.username, password: createdUser.password }).expect(200).end(function (err, res) {
        assert.equal(res.body.username, createdUser.username);
        done(err);
      });
    });
  });

  describe('#User Me', function () {
    var createdUser = void 0;
    var accessToken = void 0;
    before(function () {
      return models.User.create({
        username: 'user-test-' + Date.now(),
        password: 'Password123'
      }).then(function (user) {
        createdUser = user;
        return server.post('/user/login').send({ username: createdUser.username, password: createdUser.password }).then(function (res) {
          accessToken = res.body.accessToken.token;
        });
      });
    });
    it('should not allow unauthorized to access /user/me', function (done) {
      server.get('/user/me').expect(401).end(function (err, res) {
        done(err);
      });
    });
    it('should not allow authorized to access /user/me', function (done) {
      server.get('/user/me').set('Authorization', accessToken).expect(200).end(function (err, res) {
        assert.equal(res.body.username, createdUser.username);
        done(err);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9oYW5kbGVycy91c2VyL3VzZXIuaGFuZGxlci50ZXN0LmpzIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJhcHAiLCJtb2RlbHMiLCJibHVlYmlyZCIsInNlcnZlciIsImRlc2NyaWJlIiwiY3JlYXRlZFVzZXIiLCJiZWZvcmUiLCJzZXF1ZWxpemUiLCJzeW5jIiwidGhlbiIsImFsbCIsIlVzZXIiLCJkZXN0cm95IiwidHJ1bmNhdGUiLCJjcmVhdGUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidXNlciIsImdldCIsIml0IiwiZG9uZSIsInBvc3QiLCJzZW5kIiwiZXhwZWN0IiwiZW5kIiwiZXJyIiwicmVzIiwiZXF1YWwiLCJib2R5IiwiYWNjZXNzVG9rZW4iLCJEYXRlIiwibm93IiwidG9rZW4iLCJzZXQiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsU0FBU0MsUUFBUSxRQUFSLENBQWY7QUFDQSxJQUFNQyxNQUFNRCxRQUFRLG1CQUFSLENBQVo7QUFDQSxJQUFNRSxTQUFTRixRQUFRLGlCQUFSLENBQWY7QUFDQSxJQUFNRyxXQUFXSCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxJQUFNSSxTQUFTSixRQUFRLFdBQVIsRUFBcUJDLEdBQXJCLENBQWY7O0FBRUFJLFNBQVMsT0FBVCxFQUFrQixZQUFNO0FBQ3RCLE1BQUlDLG9CQUFKO0FBQ0FDLFNBQU8sWUFBTTtBQUNYLFdBQU9MLE9BQU9NLFNBQVAsQ0FBaUJDLElBQWpCLEdBQ0pDLElBREksQ0FDQyxZQUFNO0FBQ1YsYUFBT1AsU0FBU1EsR0FBVCxDQUFhLENBQ2xCVCxPQUFPVSxJQUFQLENBQVlDLE9BQVosQ0FBb0IsRUFBRUMsVUFBVSxJQUFaLEVBQXBCLENBRGtCLENBQWIsQ0FBUDtBQUdELEtBTEksRUFNSkosSUFOSSxDQU1DLFlBQU07QUFDVixhQUFPUixPQUFPVSxJQUFQLENBQVlHLE1BQVosQ0FBbUIsRUFBRUMsVUFBVSxTQUFaLEVBQXVCQyxVQUFVLGFBQWpDLEVB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dCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xyXG5jb25zdCBhcHAgPSByZXF1aXJlKCcuLi8uLi8uLi9kaXN0L2FwcCcpO1xyXG5jb25zdCBtb2RlbHMgPSByZXF1aXJlKCcuLi8uLi8uLi9tb2RlbHMnKTtcclxuY29uc3QgYmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xyXG5jb25zdCBzZXJ2ZXIgPSByZXF1aXJlKCdzdXBlcnRlc3QnKShhcHApO1xyXG5cclxuZGVzY3JpYmUoJyNVc2VyJywgKCkgPT4ge1xyXG4gIGxldCBjcmVhdGVkVXNlcjtcclxuICBiZWZvcmUoKCkgPT4ge1xyXG4gICAgcmV0dXJuIG1vZGVscy5zZXF1ZWxpemUuc3luYygpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gYmx1ZWJpcmQuYWxsKFtcclxuICAgICAgICAgIG1vZGVscy5Vc2VyLmRlc3Ryb3koeyB0cnVuY2F0ZTogdHJ1ZSB9KVxyXG4gICAgICAgIF0pO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1vZGVscy5Vc2VyLmNyZWF0ZSh7IHVzZXJuYW1lOiAndXNlcjEyMycsIHBhc3N3b3JkOiAnUGFzc3dvcmQxMjMnIH0pXHJcbiAgICAgICAgICAudGhlbih1c2VyID0+IHVzZXIuZ2V0KCkpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigodXNlcikgPT4ge1xyXG4gICAgICAgIGNyZWF0ZWRVc2VyID0gdXNlcjtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCcjVXNlciBDcmVhdGlvbicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgYWRkIGEgdXNlcicsIChkb25lKSA9PiB7XHJcbiAgICAgIGxldCB1c2VybmFtZSA9ICdKTSBTYW50b3MnO1xyXG4gICAgICBzZXJ2ZXJcclxuICAgICAgICAucG9zdCgnL3VzZXIvJylcclxuICAgICAgICAuc2VuZCh7IHVzZXJuYW1lIH0pXHJcbiAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcclxuICAgICAgICAgIGFzc2VydC5lcXVhbChyZXMuYm9keS51c2VybmFtZSwgdXNlcm5hbWUpO1xyXG4gICAgICAgICAgZG9uZShlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCcjVXNlciBMb2dpbicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgYWxsb3cgdXNlciB0byBsb2dpbicsIChkb25lKSA9PiB7XHJcbiAgICAgIHNlcnZlclxyXG4gICAgICAgIC5wb3N0KCcvdXNlci9sb2dpbicpXHJcbiAgICAgICAgLnNlbmQoeyB1c2VybmFtZTogY3JlYXRlZFVzZXIudXNlcm5hbWUsIHBhc3N3b3JkOiBjcmVhdGVkVXNlci5wYXNzd29yZCB9KVxyXG4gICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzLmJvZHkudXNlcm5hbWUsIGNyZWF0ZWRVc2VyLnVzZXJuYW1lKTtcclxuICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnI1VzZXIgTWUnLCAoKSA9PiB7XHJcbiAgICBsZXQgY3JlYXRlZFVzZXI7XHJcbiAgICBsZXQgYWNjZXNzVG9rZW47XHJcbiAgICBiZWZvcmUoKCkgPT4ge1xyXG4gICAgICByZXR1cm4gbW9kZWxzLlVzZXIuY3JlYXRlKHtcclxuICAgICAgICB1c2VybmFtZTogJ3VzZXItdGVzdC0nICsgRGF0ZS5ub3coKSxcclxuICAgICAgICBwYXNzd29yZDogJ1Bhc3N3b3JkMTIzJ1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigodXNlcikgPT4ge1xyXG4gICAgICAgIGNyZWF0ZWRVc2VyID0gdXNlcjtcclxuICAgICAgICByZXR1cm4gc2VydmVyXHJcbiAgICAgICAgICAucG9zdCgnL3VzZXIvbG9naW4nKVxyXG4gICAgICAgICAgLnNlbmQoeyB1c2VybmFtZTogY3JlYXRlZFVzZXIudXNlcm5hbWUsIHBhc3N3b3JkOiBjcmVhdGVkVXNlci5wYXNzd29yZCB9KVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbiA9IHJlcy5ib2R5LmFjY2Vzc1Rva2VuLnRva2VuO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyB1bmF1dGhvcml6ZWQgdG8gYWNjZXNzIC91c2VyL21lJywgKGRvbmUpID0+IHtcclxuICAgICAgc2VydmVyXHJcbiAgICAgICAgLmdldCgnL3VzZXIvbWUnKVxyXG4gICAgICAgIC5leHBlY3QoNDAxKVxyXG4gICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgICBkb25lKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdzaG91bGQgbm90IGFsbG93IGF1dGhvcml6ZWQgdG8gYWNjZXNzIC91c2VyL21lJywgKGRvbmUpID0+IHtcclxuICAgICAgc2VydmVyXHJcbiAgICAgICAgLmdldCgnL3VzZXIvbWUnKVxyXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBhY2Nlc3NUb2tlbilcclxuICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlcy5ib2R5LnVzZXJuYW1lLCBjcmVhdGVkVXNlci51c2VybmFtZSk7XHJcbiAgICAgICAgICBkb25lKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7Il19