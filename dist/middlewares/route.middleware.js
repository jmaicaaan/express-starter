'use strict';

var _index = require('../services/index');

var _util = require('../lib/util');

var RouteMiddleware;

RouteMiddleware = function RouteMiddleware() {
  this.accessTokenService = new _index.AccessTokenService();
  this.util = new _util.Util();
};

RouteMiddleware.prototype.acl = function (req, res, next) {
  var _this = this;

  if (hasAccessToken(req, this.util)) {
    var accessToken = this.util.getAccessToken(req);
    return validateAccessToken(this.accessTokenService, accessToken).then(function (valid) {
      if (valid) {
        return next();
      }
      var error = _this.util.unauthorizedError();
      res.status(401);
      return next(error);
    });
  } else {
    var error = this.util.unauthorizedError();
    res.status(401);
    return next(error);
  }
};

// Helpers

function hasAccessToken(req, util) {
  if (!req && !req.headers) {
    return false;
  }
  var accessToken = util.getAccessToken(req);
  return accessToken ? true : false;
}

function validateAccessToken(accessTokenService, accessToken) {
  return accessTokenService.getUserByAccessToken(accessToken).then(function (user) {
    if (user && user.get()) {
      return true;
    }
    return false;
  });
}

module.exports.RouteMiddleware = RouteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2FwcC9taWRkbGV3YXJlcy9yb3V0ZS5taWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbIlJvdXRlTWlkZGxld2FyZSIsImFjY2Vzc1Rva2VuU2VydmljZSIsInV0aWwiLCJwcm90b3R5cGUiLCJhY2wiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaGFzQWNjZXNzVG9rZW4iLCJhY2Nlc3NUb2tlbiIsImdldEFjY2Vzc1Rva2VuIiwidmFsaWRhdGVBY2Nlc3NUb2tlbiIsInRoZW4iLCJ2YWxpZCIsImVycm9yIiwidW5hdXRob3JpemVkRXJyb3IiLCJzdGF0dXMiLCJoZWFkZXJzIiwiZ2V0VXNlckJ5QWNjZXNzVG9rZW4iLCJ1c2VyIiwiZ2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQSxJQUFJQSxlQUFKOztBQUVBQSxrQkFBa0IsMkJBQVc7QUFDM0IsT0FBS0Msa0JBQUwsR0FBMEIsK0JBQTFCO0FBQ0EsT0FBS0MsSUFBTCxHQUFZLGdCQUFaO0FBQ0QsQ0FIRDs7QUFLQUYsZ0JBQWdCRyxTQUFoQixDQUEwQkMsR0FBMUIsR0FBZ0MsVUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CQyxJQUFuQixFQUF5QjtBQUFBOztBQUN2RCxNQUFJQyxlQUFlSCxHQUFmLEVBQW9CLEtBQUtILElBQXpCLENBQUosRUFBb0M7QUFDbEMsUUFBTU8sY0FBYyxLQUFLUCxJQUFMLENBQVVRLGNBQVYsQ0FBeUJMLEdBQXpCLENBQXBCO0FBQ0EsV0FBT00sb0JBQW9CLEtBQUtWLGtCQUF6QixFQUE2Q1EsV0FBN0MsRUFDSkcsSUFESSxDQUNDLFVBQUNDLEtBQUQsRUFBVztBQUNmLFVBQUlBLEtBQUosRUFBVztBQUNULGVBQU9OLE1BQVA7QUFDRDtBQUNELFVBQU1PLFFBQVEsTUFBS1osSUFBTCxDQUFVYSxpQkFBVixFQUFkO0FBQ0FULFVBQUlVLE1BQUosQ0FBVyxHQUFYO0FBQ0EsYUFBT1QsS0FBS08sS0FBTCxDQUFQO0FBQ0gsS0FSTSxDQUFQO0FBU0QsR0FYRCxNQVdPO0FBQ0wsUUFBTUEsUUFBUSxLQUFLWixJQUFMLENBQVVhLGlCQUFWLEVBQWQ7QUFDQVQsUUFBSVUsTUFBSixDQUFXLEdBQVg7QUFDQSxXQUFPVCxLQUFLTyxLQUFMLENBQVA7QUFDRDtBQUNGLENBakJEOztBQW1CQTs7QUFFQSxTQUFTTixjQUFULENBQXdCSCxHQUF4QixFQUE2QkgsSUFBN0IsRUFBbUM7QUFDakMsTUFBSSxDQUFDRyxHQUFELElBQVEsQ0FBQ0EsSUFBSVksT0FBakIsRUFBMEI7QUFDeEIsV0FBTyxLQUFQO0FBQ0Q7QUFDRCxNQUFNUixjQUFjUCxLQUFLUSxjQUFMLENBQW9CTCxHQUFwQixDQUFwQjtBQUNBLFNBQU9JLGNBQWMsSUFBZCxHQUFxQixLQUE1QjtBQUNEOztBQUVELFNBQVNFLG1CQUFULENBQTZCVixrQkFBN0IsRUFBaURRLFdBQWpELEVBQThEO0FBQzVELFNBQU9SLG1CQUFtQmlCLG9CQUFuQixDQUF3Q1QsV0FBeEMsRUFDSkcsSUFESSxDQUNDLFVBQUNPLElBQUQsRUFBVTtBQUNkLFFBQUlBLFFBQVFBLEtBQUtDLEdBQUwsRUFBWixFQUF3QjtBQUN0QixhQUFPLElBQVA7QUFDRDtBQUNELFdBQU8sS0FBUDtBQUNELEdBTkksQ0FBUDtBQU9EOztBQUVEQyxPQUFPQyxPQUFQLENBQWV0QixlQUFmLEdBQWlDQSxlQUFqQyIsImZpbGUiOiJyb3V0ZS5taWRkbGV3YXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjZXNzVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xyXG5cclxudmFyIFJvdXRlTWlkZGxld2FyZTtcclxuXHJcblJvdXRlTWlkZGxld2FyZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYWNjZXNzVG9rZW5TZXJ2aWNlID0gbmV3IEFjY2Vzc1Rva2VuU2VydmljZSgpO1xyXG4gIHRoaXMudXRpbCA9IG5ldyBVdGlsKCk7XHJcbn07XHJcblxyXG5Sb3V0ZU1pZGRsZXdhcmUucHJvdG90eXBlLmFjbCA9IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgaWYgKGhhc0FjY2Vzc1Rva2VuKHJlcSwgdGhpcy51dGlsKSkge1xyXG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSB0aGlzLnV0aWwuZ2V0QWNjZXNzVG9rZW4ocmVxKTtcclxuICAgIHJldHVybiB2YWxpZGF0ZUFjY2Vzc1Rva2VuKHRoaXMuYWNjZXNzVG9rZW5TZXJ2aWNlLCBhY2Nlc3NUb2tlbilcclxuICAgICAgLnRoZW4oKHZhbGlkKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMudXRpbC51bmF1dGhvcml6ZWRFcnJvcigpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDAxKTtcclxuICAgICAgICByZXR1cm4gbmV4dChlcnJvcik7XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZXJyb3IgPSB0aGlzLnV0aWwudW5hdXRob3JpemVkRXJyb3IoKTtcclxuICAgIHJlcy5zdGF0dXMoNDAxKTtcclxuICAgIHJldHVybiBuZXh0KGVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBIZWxwZXJzXHJcblxyXG5mdW5jdGlvbiBoYXNBY2Nlc3NUb2tlbihyZXEsIHV0aWwpIHtcclxuICBpZiAoIXJlcSAmJiAhcmVxLmhlYWRlcnMpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgY29uc3QgYWNjZXNzVG9rZW4gPSB1dGlsLmdldEFjY2Vzc1Rva2VuKHJlcSk7XHJcbiAgcmV0dXJuIGFjY2Vzc1Rva2VuID8gdHJ1ZSA6IGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuU2VydmljZSwgYWNjZXNzVG9rZW4pIHtcclxuICByZXR1cm4gYWNjZXNzVG9rZW5TZXJ2aWNlLmdldFVzZXJCeUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKVxyXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5nZXQoKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5Sb3V0ZU1pZGRsZXdhcmUgPSBSb3V0ZU1pZGRsZXdhcmU7Il19