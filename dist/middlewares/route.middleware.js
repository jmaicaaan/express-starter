'use strict';

var _accessToken = require('../services/accessToken.service');

var RouteMiddleware;

RouteMiddleware = function RouteMiddleware() {
  this.accessTokenService = new _accessToken.AccessTokenService();
};

RouteMiddleware.prototype.acl = function (req, res, next, modelRoutes) {
  var _this = this;

  var method = req.method;
  var authorizedRoutes = modelRoutes || [];
  var headers = req.headers;
  var url = req.url;

  authorizedRoutes.forEach(function (routes) {
    if (routes.method === method && routes.url === url) {
      var accessToken = headers['authorization'];
      if (accessToken) {
        return validateAccessToken(_this.accessTokenService, accessToken).then(function (valid) {
          return valid ? next() : unauthorizedError(res, next);
        });
      } else {
        return unauthorizedError(res, next);
      }
    }
  });
  next();
};

// Helpers

function unauthorizedError(res, next, message) {
  var error = new Error(message || 'User unauthorized');
  res.status(401);
  return next(error);
}

function validateAccessToken(accessTokenService, accessToken) {
  return accessTokenService.getUserByAccessToken(accessToken).then(function (user) {
    if (user && user.get()) {
      return true;
    }
    return false;
  });
}

module.exports.RouteMiddleware = RouteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2FwcC9taWRkbGV3YXJlcy9yb3V0ZS5taWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbIlJvdXRlTWlkZGxld2FyZSIsImFjY2Vzc1Rva2VuU2VydmljZSIsInByb3RvdHlwZSIsImFjbCIsInJlcSIsInJlcyIsIm5leHQiLCJtb2RlbFJvdXRlcyIsIm1ldGhvZCIsImF1dGhvcml6ZWRSb3V0ZXMiLCJoZWFkZXJzIiwidXJsIiwiZm9yRWFjaCIsInJvdXRlcyIsImFjY2Vzc1Rva2VuIiwidmFsaWRhdGVBY2Nlc3NUb2tlbiIsInRoZW4iLCJ2YWxpZCIsInVuYXV0aG9yaXplZEVycm9yIiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXMiLCJnZXRVc2VyQnlBY2Nlc3NUb2tlbiIsInVzZXIiLCJnZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQUlBLGVBQUo7O0FBRUFBLGtCQUFrQiwyQkFBVztBQUMzQixPQUFLQyxrQkFBTCxHQUEwQixxQ0FBMUI7QUFDRCxDQUZEOztBQUlBRCxnQkFBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixHQUFnQyxVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUJDLElBQW5CLEVBQXlCQyxXQUF6QixFQUFzQztBQUFBOztBQUNwRSxNQUFNQyxTQUFTSixJQUFJSSxNQUFuQjtBQUNBLE1BQU1DLG1CQUFtQkYsZUFBZSxFQUF4QztBQUNBLE1BQU1HLFVBQVVOLElBQUlNLE9BQXBCO0FBQ0EsTUFBTUMsTUFBTVAsSUFBSU8sR0FBaEI7O0FBRUFGLG1CQUFpQkcsT0FBakIsQ0FBeUIsVUFBQ0MsTUFBRCxFQUFZO0FBQ25DLFFBQUlBLE9BQU9MLE1BQVAsS0FBa0JBLE1BQWxCLElBQTRCSyxPQUFPRixHQUFQLEtBQWVBLEdBQS9DLEVBQW9EO0FBQ2xELFVBQU1HLGNBQWNKLFFBQVEsZUFBUixDQUFwQjtBQUNBLFVBQUlJLFdBQUosRUFBaUI7QUFDZixlQUFPQyxvQkFBb0IsTUFBS2Qsa0JBQXpCLEVBQTZDYSxXQUE3QyxFQUNKRSxJQURJLENBQ0MsVUFBQ0MsS0FBRCxFQUFXO0FBQ2YsaUJBQU9BLFFBQVFYLE1BQVIsR0FBaUJZLGtCQUFrQmIsR0FBbEIsRUFBdUJDLElBQXZCLENBQXhCO0FBQ0QsU0FISSxDQUFQO0FBSUQsT0FMRCxNQUtPO0FBQ0wsZUFBT1ksa0JBQWtCYixHQUFsQixFQUF1QkMsSUFBdkIsQ0FBUDtBQUNEO0FBQ0Y7QUFDRixHQVpEO0FBYUFBO0FBQ0QsQ0FwQkQ7O0FBc0JBOztBQUVBLFNBQVNZLGlCQUFULENBQTJCYixHQUEzQixFQUFnQ0MsSUFBaEMsRUFBc0NhLE9BQXRDLEVBQStDO0FBQzdDLE1BQU1DLFFBQVEsSUFBSUMsS0FBSixDQUFVRixXQUFXLG1CQUFyQixDQUFkO0FBQ0FkLE1BQUlpQixNQUFKLENBQVcsR0FBWDtBQUNBLFNBQU9oQixLQUFLYyxLQUFMLENBQVA7QUFDRDs7QUFFRCxTQUFTTCxtQkFBVCxDQUE2QmQsa0JBQTdCLEVBQWlEYSxXQUFqRCxFQUE4RDtBQUM1RCxTQUFPYixtQkFBbUJzQixvQkFBbkIsQ0FBd0NULFdBQXhDLEVBQ0pFLElBREksQ0FDQyxVQUFDUSxJQUFELEVBQVU7QUFDZCxRQUFJQSxRQUFRQSxLQUFLQyxHQUFMLEVBQVosRUFBd0I7QUFDdEIsYUFBTyxJQUFQO0FBQ0Q7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQU5JLENBQVA7QUFPRDs7QUFFREMsT0FBT0MsT0FBUCxDQUFlM0IsZUFBZixHQUFpQ0EsZUFBakMiLCJmaWxlIjoicm91dGUubWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY2Vzc1Rva2VuU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FjY2Vzc1Rva2VuLnNlcnZpY2UnO1xyXG5cclxudmFyIFJvdXRlTWlkZGxld2FyZTtcclxuXHJcblJvdXRlTWlkZGxld2FyZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYWNjZXNzVG9rZW5TZXJ2aWNlID0gbmV3IEFjY2Vzc1Rva2VuU2VydmljZSgpO1xyXG59O1xyXG5cclxuUm91dGVNaWRkbGV3YXJlLnByb3RvdHlwZS5hY2wgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCwgbW9kZWxSb3V0ZXMpIHtcclxuICBjb25zdCBtZXRob2QgPSByZXEubWV0aG9kO1xyXG4gIGNvbnN0IGF1dGhvcml6ZWRSb3V0ZXMgPSBtb2RlbFJvdXRlcyB8fCBbXTtcclxuICBjb25zdCBoZWFkZXJzID0gcmVxLmhlYWRlcnM7XHJcbiAgY29uc3QgdXJsID0gcmVxLnVybDtcclxuXHJcbiAgYXV0aG9yaXplZFJvdXRlcy5mb3JFYWNoKChyb3V0ZXMpID0+IHtcclxuICAgIGlmIChyb3V0ZXMubWV0aG9kID09PSBtZXRob2QgJiYgcm91dGVzLnVybCA9PT0gdXJsKSB7XHJcbiAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gaGVhZGVyc1snYXV0aG9yaXphdGlvbiddO1xyXG4gICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gdmFsaWRhdGVBY2Nlc3NUb2tlbih0aGlzLmFjY2Vzc1Rva2VuU2VydmljZSwgYWNjZXNzVG9rZW4pXHJcbiAgICAgICAgICAudGhlbigodmFsaWQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkID8gbmV4dCgpIDogdW5hdXRob3JpemVkRXJyb3IocmVzLCBuZXh0KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmF1dGhvcml6ZWRFcnJvcihyZXMsIG5leHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgbmV4dCgpO1xyXG59O1xyXG5cclxuLy8gSGVscGVyc1xyXG5cclxuZnVuY3Rpb24gdW5hdXRob3JpemVkRXJyb3IocmVzLCBuZXh0LCBtZXNzYWdlKSB7XHJcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSB8fCAnVXNlciB1bmF1dGhvcml6ZWQnKTtcclxuICByZXMuc3RhdHVzKDQwMSk7XHJcbiAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuU2VydmljZSwgYWNjZXNzVG9rZW4pIHtcclxuICByZXR1cm4gYWNjZXNzVG9rZW5TZXJ2aWNlLmdldFVzZXJCeUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKVxyXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5nZXQoKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG59IFxyXG5cclxubW9kdWxlLmV4cG9ydHMuUm91dGVNaWRkbGV3YXJlID0gUm91dGVNaWRkbGV3YXJlOyJdfQ==