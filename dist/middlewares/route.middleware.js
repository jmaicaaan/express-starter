'use strict';

var _accessToken = require('../services/accessToken.service');

var RouteMiddleware;

RouteMiddleware = function RouteMiddleware() {
  this.accessTokenService = new _accessToken.AccessTokenService();
};

RouteMiddleware.prototype.acl = function (req, res, next) {
  if (hasAccessToken(req)) {
    var accessToken = getAccessToken(req);
    return validateAccessToken(this.accessTokenService, accessToken).then(function (valid) {
      if (valid) {
        return next(accessToken);
      }
      return unauthorizedError(err, next);
    });
  } else {
    return unauthorizedError(res, next);
  }
};

// Helpers

function hasAccessToken(req) {
  if (!req && !req.headers) {
    return false;
  }
  var accessToken = getAccessToken(req);
  return accessToken ? true : false;
}

function unauthorizedError(res, next, message) {
  var error = new Error(message || 'User unauthorized');
  res.status(401);
  return next(error);
}

function validateAccessToken(accessTokenService, accessToken) {
  return accessTokenService.getUserByAccessToken(accessToken).then(function (user) {
    if (user && user.get()) {
      return true;
    }
    return false;
  });
}

function getAccessToken(req) {
  var headers = req.headers;
  var accessToken = headers['authorization'];
  return accessToken;
}

module.exports.RouteMiddleware = RouteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2FwcC9taWRkbGV3YXJlcy9yb3V0ZS5taWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbIlJvdXRlTWlkZGxld2FyZSIsImFjY2Vzc1Rva2VuU2VydmljZSIsInByb3RvdHlwZSIsImFjbCIsInJlcSIsInJlcyIsIm5leHQiLCJoYXNBY2Nlc3NUb2tlbiIsImFjY2Vzc1Rva2VuIiwiZ2V0QWNjZXNzVG9rZW4iLCJ2YWxpZGF0ZUFjY2Vzc1Rva2VuIiwidGhlbiIsInZhbGlkIiwidW5hdXRob3JpemVkRXJyb3IiLCJlcnIiLCJoZWFkZXJzIiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXMiLCJnZXRVc2VyQnlBY2Nlc3NUb2tlbiIsInVzZXIiLCJnZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQUlBLGVBQUo7O0FBRUFBLGtCQUFrQiwyQkFBVztBQUMzQixPQUFLQyxrQkFBTCxHQUEwQixxQ0FBMUI7QUFDRCxDQUZEOztBQUlBRCxnQkFBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixHQUFnQyxVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUJDLElBQW5CLEVBQXlCO0FBQ3ZELE1BQUlDLGVBQWVILEdBQWYsQ0FBSixFQUF5QjtBQUN2QixRQUFNSSxjQUFjQyxlQUFlTCxHQUFmLENBQXBCO0FBQ0EsV0FBT00sb0JBQW9CLEtBQUtULGtCQUF6QixFQUE2Q08sV0FBN0MsRUFDSkcsSUFESSxDQUNDLFVBQUNDLEtBQUQsRUFBVztBQUNmLFVBQUlBLEtBQUosRUFBVztBQUNULGVBQU9OLEtBQUtFLFdBQUwsQ0FBUDtBQUNEO0FBQ0QsYUFBT0ssa0JBQWtCQyxHQUFsQixFQUF1QlIsSUFBdkIsQ0FBUDtBQUNILEtBTk0sQ0FBUDtBQU9ELEdBVEQsTUFTTztBQUNMLFdBQU9PLGtCQUFrQlIsR0FBbEIsRUFBdUJDLElBQXZCLENBQVA7QUFDRDtBQUNGLENBYkQ7O0FBZUE7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QkgsR0FBeEIsRUFBNkI7QUFDM0IsTUFBSSxDQUFDQSxHQUFELElBQVEsQ0FBQ0EsSUFBSVcsT0FBakIsRUFBMEI7QUFDeEIsV0FBTyxLQUFQO0FBQ0Q7QUFDRCxNQUFNUCxjQUFjQyxlQUFlTCxHQUFmLENBQXBCO0FBQ0EsU0FBT0ksY0FBYyxJQUFkLEdBQXFCLEtBQTVCO0FBQ0Q7O0FBRUQsU0FBU0ssaUJBQVQsQ0FBMkJSLEdBQTNCLEVBQWdDQyxJQUFoQyxFQUFzQ1UsT0FBdEMsRUFBK0M7QUFDN0MsTUFBTUMsUUFBUSxJQUFJQyxLQUFKLENBQVVGLFdBQVcsbUJBQXJCLENBQWQ7QUFDQVgsTUFBSWMsTUFBSixDQUFXLEdBQVg7QUFDQSxTQUFPYixLQUFLVyxLQUFMLENBQVA7QUFDRDs7QUFFRCxTQUFTUCxtQkFBVCxDQUE2QlQsa0JBQTdCLEVBQWlETyxXQUFqRCxFQUE4RDtBQUM1RCxTQUFPUCxtQkFBbUJtQixvQkFBbkIsQ0FBd0NaLFdBQXhDLEVBQ0pHLElBREksQ0FDQyxVQUFDVSxJQUFELEVBQVU7QUFDZCxRQUFJQSxRQUFRQSxLQUFLQyxHQUFMLEVBQVosRUFBd0I7QUFDdEIsYUFBTyxJQUFQO0FBQ0Q7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQU5JLENBQVA7QUFPRDs7QUFFRCxTQUFTYixjQUFULENBQXdCTCxHQUF4QixFQUE2QjtBQUMzQixNQUFNVyxVQUFVWCxJQUFJVyxPQUFwQjtBQUNBLE1BQU1QLGNBQWNPLFFBQVEsZUFBUixDQUFwQjtBQUNBLFNBQU9QLFdBQVA7QUFDRDs7QUFFRGUsT0FBT0MsT0FBUCxDQUFleEIsZUFBZixHQUFpQ0EsZUFBakMiLCJmaWxlIjoicm91dGUubWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY2Vzc1Rva2VuU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FjY2Vzc1Rva2VuLnNlcnZpY2UnO1xyXG5cclxudmFyIFJvdXRlTWlkZGxld2FyZTtcclxuXHJcblJvdXRlTWlkZGxld2FyZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYWNjZXNzVG9rZW5TZXJ2aWNlID0gbmV3IEFjY2Vzc1Rva2VuU2VydmljZSgpO1xyXG59O1xyXG5cclxuUm91dGVNaWRkbGV3YXJlLnByb3RvdHlwZS5hY2wgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG4gIGlmIChoYXNBY2Nlc3NUb2tlbihyZXEpKSB7XHJcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGdldEFjY2Vzc1Rva2VuKHJlcSk7XHJcbiAgICByZXR1cm4gdmFsaWRhdGVBY2Nlc3NUb2tlbih0aGlzLmFjY2Vzc1Rva2VuU2VydmljZSwgYWNjZXNzVG9rZW4pXHJcbiAgICAgIC50aGVuKCh2YWxpZCkgPT4ge1xyXG4gICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgcmV0dXJuIG5leHQoYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5hdXRob3JpemVkRXJyb3IoZXJyLCBuZXh0KTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdW5hdXRob3JpemVkRXJyb3IocmVzLCBuZXh0KTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBIZWxwZXJzXHJcblxyXG5mdW5jdGlvbiBoYXNBY2Nlc3NUb2tlbihyZXEpIHtcclxuICBpZiAoIXJlcSAmJiAhcmVxLmhlYWRlcnMpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgY29uc3QgYWNjZXNzVG9rZW4gPSBnZXRBY2Nlc3NUb2tlbihyZXEpO1xyXG4gIHJldHVybiBhY2Nlc3NUb2tlbiA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5hdXRob3JpemVkRXJyb3IocmVzLCBuZXh0LCBtZXNzYWdlKSB7XHJcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSB8fCAnVXNlciB1bmF1dGhvcml6ZWQnKTtcclxuICByZXMuc3RhdHVzKDQwMSk7XHJcbiAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuU2VydmljZSwgYWNjZXNzVG9rZW4pIHtcclxuICByZXR1cm4gYWNjZXNzVG9rZW5TZXJ2aWNlLmdldFVzZXJCeUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKVxyXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5nZXQoKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbihyZXEpIHtcclxuICBjb25zdCBoZWFkZXJzID0gcmVxLmhlYWRlcnM7XHJcbiAgY29uc3QgYWNjZXNzVG9rZW4gPSBoZWFkZXJzWydhdXRob3JpemF0aW9uJ107XHJcbiAgcmV0dXJuIGFjY2Vzc1Rva2VuO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5Sb3V0ZU1pZGRsZXdhcmUgPSBSb3V0ZU1pZGRsZXdhcmU7Il19