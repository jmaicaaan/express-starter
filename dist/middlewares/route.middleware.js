'use strict';

var _index = require('../services/index');

var _util = require('../lib/util');

var RouteMiddleware;

RouteMiddleware = function RouteMiddleware() {
  this.accessTokenService = new _index.AccessTokenService();
  this.util = new _util.Util();
};

RouteMiddleware.prototype.acl = function (req, res, next) {
  var _this = this;

  if (hasAccessToken.call(this, req)) {
    var accessToken = this.util.getAccessToken(req);
    return validateAccessToken.call(this, accessToken).then(function (valid) {
      if (valid) {
        return next();
      }
      var error = _this.util.unauthorizedError();
      res.status(401);
      return next(error);
    });
  } else {
    var error = this.util.unauthorizedError();
    res.status(401);
    return next(error);
  }
};

// Helpers

function hasAccessToken(req) {
  if (!req && !req.headers) {
    return false;
  }
  var accessToken = this.util.getAccessToken(req);
  return accessToken ? true : false;
}

function validateAccessToken(accessToken) {
  return this.accessTokenService.getUserByAccessToken(accessToken).then(function (user) {
    if (user && user.get()) {
      return true;
    }
    return false;
  });
}

module.exports.RouteMiddleware = RouteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2FwcC9taWRkbGV3YXJlcy9yb3V0ZS5taWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbIlJvdXRlTWlkZGxld2FyZSIsImFjY2Vzc1Rva2VuU2VydmljZSIsInV0aWwiLCJwcm90b3R5cGUiLCJhY2wiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaGFzQWNjZXNzVG9rZW4iLCJjYWxsIiwiYWNjZXNzVG9rZW4iLCJnZXRBY2Nlc3NUb2tlbiIsInZhbGlkYXRlQWNjZXNzVG9rZW4iLCJ0aGVuIiwidmFsaWQiLCJlcnJvciIsInVuYXV0aG9yaXplZEVycm9yIiwic3RhdHVzIiwiaGVhZGVycyIsImdldFVzZXJCeUFjY2Vzc1Rva2VuIiwidXNlciIsImdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBSUEsZUFBSjs7QUFFQUEsa0JBQWtCLDJCQUFXO0FBQzNCLE9BQUtDLGtCQUFMLEdBQTBCLCtCQUExQjtBQUNBLE9BQUtDLElBQUwsR0FBWSxnQkFBWjtBQUNELENBSEQ7O0FBS0FGLGdCQUFnQkcsU0FBaEIsQ0FBMEJDLEdBQTFCLEdBQWdDLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkMsSUFBbkIsRUFBeUI7QUFBQTs7QUFDdkQsTUFBSUMsZUFBZUMsSUFBZixDQUFvQixJQUFwQixFQUEwQkosR0FBMUIsQ0FBSixFQUFvQztBQUNsQyxRQUFNSyxjQUFjLEtBQUtSLElBQUwsQ0FBVVMsY0FBVixDQUF5Qk4sR0FBekIsQ0FBcEI7QUFDQSxXQUFPTyxvQkFBb0JILElBQXBCLENBQXlCLElBQXpCLEVBQStCQyxXQUEvQixFQUNKRyxJQURJLENBQ0MsVUFBQ0MsS0FBRCxFQUFXO0FBQ2YsVUFBSUEsS0FBSixFQUFXO0FBQ1QsZUFBT1AsTUFBUDtBQUNEO0FBQ0QsVUFBTVEsUUFBUSxNQUFLYixJQUFMLENBQVVjLGlCQUFWLEVBQWQ7QUFDQVYsVUFBSVcsTUFBSixDQUFXLEdBQVg7QUFDQSxhQUFPVixLQUFLUSxLQUFMLENBQVA7QUFDSCxLQVJNLENBQVA7QUFTRCxHQVhELE1BV087QUFDTCxRQUFNQSxRQUFRLEtBQUtiLElBQUwsQ0FBVWMsaUJBQVYsRUFBZDtBQUNBVixRQUFJVyxNQUFKLENBQVcsR0FBWDtBQUNBLFdBQU9WLEtBQUtRLEtBQUwsQ0FBUDtBQUNEO0FBQ0YsQ0FqQkQ7O0FBbUJBOztBQUVBLFNBQVNQLGNBQVQsQ0FBd0JILEdBQXhCLEVBQTZCO0FBQzNCLE1BQUksQ0FBQ0EsR0FBRCxJQUFRLENBQUNBLElBQUlhLE9BQWpCLEVBQTBCO0FBQ3hCLFdBQU8sS0FBUDtBQUNEO0FBQ0QsTUFBTVIsY0FBYyxLQUFLUixJQUFMLENBQVVTLGNBQVYsQ0FBeUJOLEdBQXpCLENBQXBCO0FBQ0EsU0FBT0ssY0FBYyxJQUFkLEdBQXFCLEtBQTVCO0FBQ0Q7O0FBRUQsU0FBU0UsbUJBQVQsQ0FBNkJGLFdBQTdCLEVBQTBDO0FBQ3hDLFNBQU8sS0FBS1Qsa0JBQUwsQ0FBd0JrQixvQkFBeEIsQ0FBNkNULFdBQTdDLEVBQ0pHLElBREksQ0FDQyxVQUFDTyxJQUFELEVBQVU7QUFDZCxRQUFJQSxRQUFRQSxLQUFLQyxHQUFMLEVBQVosRUFBd0I7QUFDdEIsYUFBTyxJQUFQO0FBQ0Q7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQU5JLENBQVA7QUFPRDs7QUFFREMsT0FBT0MsT0FBUCxDQUFldkIsZUFBZixHQUFpQ0EsZUFBakMiLCJmaWxlIjoicm91dGUubWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY2Vzc1Rva2VuU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2luZGV4JztcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uL2xpYi91dGlsJztcclxuXHJcbnZhciBSb3V0ZU1pZGRsZXdhcmU7XHJcblxyXG5Sb3V0ZU1pZGRsZXdhcmUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmFjY2Vzc1Rva2VuU2VydmljZSA9IG5ldyBBY2Nlc3NUb2tlblNlcnZpY2UoKTtcclxuICB0aGlzLnV0aWwgPSBuZXcgVXRpbCgpO1xyXG59O1xyXG5cclxuUm91dGVNaWRkbGV3YXJlLnByb3RvdHlwZS5hY2wgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG4gIGlmIChoYXNBY2Nlc3NUb2tlbi5jYWxsKHRoaXMsIHJlcSkpIHtcclxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gdGhpcy51dGlsLmdldEFjY2Vzc1Rva2VuKHJlcSk7XHJcbiAgICByZXR1cm4gdmFsaWRhdGVBY2Nlc3NUb2tlbi5jYWxsKHRoaXMsIGFjY2Vzc1Rva2VuKVxyXG4gICAgICAudGhlbigodmFsaWQpID0+IHtcclxuICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy51dGlsLnVuYXV0aG9yaXplZEVycm9yKCk7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpO1xyXG4gICAgICAgIHJldHVybiBuZXh0KGVycm9yKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBlcnJvciA9IHRoaXMudXRpbC51bmF1dGhvcml6ZWRFcnJvcigpO1xyXG4gICAgcmVzLnN0YXR1cyg0MDEpO1xyXG4gICAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEhlbHBlcnNcclxuXHJcbmZ1bmN0aW9uIGhhc0FjY2Vzc1Rva2VuKHJlcSkge1xyXG4gIGlmICghcmVxICYmICFyZXEuaGVhZGVycykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBjb25zdCBhY2Nlc3NUb2tlbiA9IHRoaXMudXRpbC5nZXRBY2Nlc3NUb2tlbihyZXEpO1xyXG4gIHJldHVybiBhY2Nlc3NUb2tlbiA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbikge1xyXG4gIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuU2VydmljZS5nZXRVc2VyQnlBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbilcclxuICAgIC50aGVuKCh1c2VyKSA9PiB7XHJcbiAgICAgIGlmICh1c2VyICYmIHVzZXIuZ2V0KCkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMuUm91dGVNaWRkbGV3YXJlID0gUm91dGVNaWRkbGV3YXJlOyJdfQ==