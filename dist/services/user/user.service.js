'use strict';

var _models = require('../../../models');

var _models2 = _interopRequireDefault(_models);

var _index = require('../index');

var _util = require('../../../dist/lib/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserService;

UserService = function UserService() {
  this.accessTokenService = new _index.AccessTokenService();
  this.util = new _util.Util();
};

UserService.prototype.addUser = function (username, password) {
  return _models2.default.User.create({ username: username, password: password });
};

UserService.prototype.login = function (username, password) {
  var _this = this;

  /**
   * _.retrieve()
   * Added as an instance method in the model to remove properties at an instance level
   *
   */

  return _models2.default.User.findOne({ where: { username: username, password: password } }).then(function (user) {
    if (user && user._retrieve()) {
      user = user._retrieve();
      return _this.accessTokenService.addUserToken(user.id).then(function (accessToken) {
        user.accessToken = accessToken.get();
        return user;
      });
    } else {
      throw _this.util.invalidLoginError();
    }
  });
};

UserService.prototype.find = function (filter) {
  if (!filter) {
    filter = {};
  }
  return _models2.default.User.find(filter).then(function (user) {
    return user._retrieve();
  });
};

UserService.prototype.findMe = function (accessToken) {
  return _models2.default.User.findOne({
    include: [{
      model: _models2.default.accessToken,
      where: { token: accessToken }
    }]
  }).then(function (user) {
    return user._retrieve();
  });
};

module.exports.UserService = UserService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9zZXJ2aWNlcy91c2VyL3VzZXIuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJVc2VyU2VydmljZSIsImFjY2Vzc1Rva2VuU2VydmljZSIsInV0aWwiLCJwcm90b3R5cGUiLCJhZGRVc2VyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIlVzZXIiLCJjcmVhdGUiLCJsb2dpbiIsImZpbmRPbmUiLCJ3aGVyZSIsInRoZW4iLCJ1c2VyIiwiX3JldHJpZXZlIiwiYWRkVXNlclRva2VuIiwiaWQiLCJhY2Nlc3NUb2tlbiIsImdldCIsImludmFsaWRMb2dpbkVycm9yIiwiZmluZCIsImZpbHRlciIsImZpbmRNZSIsImluY2x1ZGUiLCJtb2RlbCIsInRva2VuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBRUEsSUFBSUEsV0FBSjs7QUFFQUEsY0FBYyx1QkFBVztBQUN2QixPQUFLQyxrQkFBTCxHQUEwQiwrQkFBMUI7QUFDQSxPQUFLQyxJQUFMLEdBQVksZ0JBQVo7QUFDRCxDQUhEOztBQUtBRixZQUFZRyxTQUFaLENBQXNCQyxPQUF0QixHQUFnQyxVQUFTQyxRQUFULEVBQW1CQyxRQUFuQixFQUE2QjtBQUMzRCxTQUFPLGlCQUFPQyxJQUFQLENBQVlDLE1BQVosQ0FBbUIsRUFBRUgsa0JBQUYsRUFBWUMsa0JBQVosRUFBbkIsQ0FBUDtBQUNELENBRkQ7O0FBSUFOLFlBQVlHLFNBQVosQ0FBc0JNLEtBQXRCLEdBQThCLFVBQVNKLFFBQVQsRUFBbUJDLFFBQW5CLEVBQTZCO0FBQUE7O0FBRXpEOzs7Ozs7QUFNQSxTQUFPLGlCQUFPQyxJQUFQLENBQVlHLE9BQVosQ0FBb0IsRUFBRUMsT0FBTyxFQUFFTixrQkFBRixFQUFZQyxrQkFBWixFQUFULEVBQXBCLEVBQ0pNLElBREksQ0FDQyxVQUFDQyxJQUFELEVBQVU7QUFDZCxRQUFJQSxRQUFRQSxLQUFLQyxTQUFMLEVBQVosRUFBOEI7QUFDNUJELGFBQU9BLEtBQUtDLFNBQUwsRUFBUDtBQUNBLGFBQU8sTUFBS2Isa0JBQUwsQ0FBd0JjLFlBQXhCLENBQXFDRixLQUFLRyxFQUExQyxFQUNKSixJQURJLENBQ0MsVUFBQ0ssV0FBRCxFQUFpQjtBQUNyQkosYUFBS0ksV0FBTCxHQUFtQkEsWUFBWUMsR0FBWixFQUFuQjtBQUNBLGVBQU9MLElBQVA7QUFDSCxPQUpNLENBQVA7QUFLRCxLQVBELE1BT087QUFDTCxZQUFNLE1BQUtYLElBQUwsQ0FBVWlCLGlCQUFWLEVBQU47QUFDRDtBQUNGLEdBWkksQ0FBUDtBQWFELENBckJEOztBQXVCQW5CLFlBQVlHLFNBQVosQ0FBc0JpQixJQUF0QixHQUE2QixVQUFTQyxNQUFULEVBQWlCO0FBQzVDLE1BQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ1hBLGFBQVMsRUFBVDtBQUNEO0FBQ0QsU0FBTyxpQkFBT2QsSUFBUCxDQUFZYSxJQUFaLENBQWlCQyxNQUFqQixFQUNKVCxJQURJLENBQ0MsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLEtBQUtDLFNBQUwsRUFBVjtBQUFBLEdBREQsQ0FBUDtBQUVELENBTkQ7O0FBUUFkLFlBQVlHLFNBQVosQ0FBc0JtQixNQUF0QixHQUErQixVQUFTTCxXQUFULEVBQXNCO0FBQ25ELFNBQU8saUJBQU9WLElBQVAsQ0FBWUcsT0FBWixDQUFvQjtBQUN6QmEsYUFBUyxDQUFDO0FBQ1JDLGFBQU8saUJBQU9QLFdBRE47QUFFUk4sYUFBTyxFQUFFYyxPQUFPUixXQUFUO0FBRkMsS0FBRDtBQURnQixHQUFwQixFQU1OTCxJQU5NLENBTUQsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLEtBQUtDLFNBQUwsRUFBVjtBQUFBLEdBTkMsQ0FBUDtBQU9ELENBUkQ7O0FBVUFZLE9BQU9DLE9BQVAsQ0FBZTNCLFdBQWYsR0FBNkJBLFdBQTdCIiwiZmlsZSI6InVzZXIuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2RlbHMgZnJvbSAnLi4vLi4vLi4vbW9kZWxzJztcclxuaW1wb3J0IHsgQWNjZXNzVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vaW5kZXgnO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vZGlzdC9saWIvdXRpbCc7XHJcblxyXG52YXIgVXNlclNlcnZpY2U7XHJcblxyXG5Vc2VyU2VydmljZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYWNjZXNzVG9rZW5TZXJ2aWNlID0gbmV3IEFjY2Vzc1Rva2VuU2VydmljZSgpO1xyXG4gIHRoaXMudXRpbCA9IG5ldyBVdGlsKCk7XHJcbn07XHJcblxyXG5Vc2VyU2VydmljZS5wcm90b3R5cGUuYWRkVXNlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gIHJldHVybiBtb2RlbHMuVXNlci5jcmVhdGUoeyB1c2VybmFtZSwgcGFzc3dvcmQgfSk7XHJcbn07XHJcblxyXG5Vc2VyU2VydmljZS5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuXHJcbiAgLyoqXHJcbiAgICogXy5yZXRyaWV2ZSgpXHJcbiAgICogQWRkZWQgYXMgYW4gaW5zdGFuY2UgbWV0aG9kIGluIHRoZSBtb2RlbCB0byByZW1vdmUgcHJvcGVydGllcyBhdCBhbiBpbnN0YW5jZSBsZXZlbFxyXG4gICAqXHJcbiAgICovXHJcblxyXG4gIHJldHVybiBtb2RlbHMuVXNlci5maW5kT25lKHsgd2hlcmU6IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH19KVxyXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5fcmV0cmlldmUoKSkge1xyXG4gICAgICAgIHVzZXIgPSB1c2VyLl9yZXRyaWV2ZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuU2VydmljZS5hZGRVc2VyVG9rZW4odXNlci5pZClcclxuICAgICAgICAgIC50aGVuKChhY2Nlc3NUb2tlbikgPT4ge1xyXG4gICAgICAgICAgICB1c2VyLmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW4uZ2V0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IHRoaXMudXRpbC5pbnZhbGlkTG9naW5FcnJvcigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcblVzZXJTZXJ2aWNlLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24oZmlsdGVyKSB7XHJcbiAgaWYgKCFmaWx0ZXIpIHtcclxuICAgIGZpbHRlciA9IHt9O1xyXG4gIH1cclxuICByZXR1cm4gbW9kZWxzLlVzZXIuZmluZChmaWx0ZXIpXHJcbiAgICAudGhlbigodXNlcikgPT4gdXNlci5fcmV0cmlldmUoKSk7XHJcbn07XHJcblxyXG5Vc2VyU2VydmljZS5wcm90b3R5cGUuZmluZE1lID0gZnVuY3Rpb24oYWNjZXNzVG9rZW4pIHtcclxuICByZXR1cm4gbW9kZWxzLlVzZXIuZmluZE9uZSh7XHJcbiAgICBpbmNsdWRlOiBbe1xyXG4gICAgICBtb2RlbDogbW9kZWxzLmFjY2Vzc1Rva2VuLFxyXG4gICAgICB3aGVyZTogeyB0b2tlbjogYWNjZXNzVG9rZW4gfVxyXG4gICAgfV1cclxuICB9KVxyXG4gIC50aGVuKCh1c2VyKSA9PiB1c2VyLl9yZXRyaWV2ZSgpKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzLlVzZXJTZXJ2aWNlID0gVXNlclNlcnZpY2U7Il19