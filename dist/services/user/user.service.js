'use strict';

var _models = require('../../../models');

var _models2 = _interopRequireDefault(_models);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserService;

UserService = function UserService() {
  this.accessTokenService = new _index.AccessTokenService();
};

UserService.prototype.addUser = function (username, password) {
  return _models2.default.User.create({ username: username, password: password });
};

UserService.prototype.login = function (username, password) {
  var _this = this;

  return _models2.default.User.findOne({ where: { username: username, password: password } }).then(function (user) {
    if (user && user.get()) {
      return _this.accessTokenService.addUserToken(user.get().id).then(function (accessToken) {
        user.get().accessToken = accessToken.get();
        return user;
      });
    } else {
      throw createInvalidLoginError();
    }
  }).then(function (user) {
    return user;
  });
};

UserService.prototype.find = function (filter) {
  if (!filter) {
    filter = {};
  }
  return _models2.default.User.find(filter);
};

UserService.prototype.findMe = function (accessToken) {
  return _models2.default.User.find({ include: [{
      model: _models2.default.accessToken,
      where: { token: accessToken }
    }]
  });
};

// helpers

function createInvalidLoginError() {
  var error = new Error('Invalid login credentials');
  error.name = 'INVALID_LOGIN_CREDENTIALS';
  return error;
}

module.exports.UserService = UserService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9zZXJ2aWNlcy91c2VyL3VzZXIuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJVc2VyU2VydmljZSIsImFjY2Vzc1Rva2VuU2VydmljZSIsInByb3RvdHlwZSIsImFkZFVzZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiVXNlciIsImNyZWF0ZSIsImxvZ2luIiwiZmluZE9uZSIsIndoZXJlIiwidGhlbiIsInVzZXIiLCJnZXQiLCJhZGRVc2VyVG9rZW4iLCJpZCIsImFjY2Vzc1Rva2VuIiwiY3JlYXRlSW52YWxpZExvZ2luRXJyb3IiLCJmaW5kIiwiZmlsdGVyIiwiZmluZE1lIiwiaW5jbHVkZSIsIm1vZGVsIiwidG9rZW4iLCJlcnJvciIsIkVycm9yIiwibmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUVBLElBQUlBLFdBQUo7O0FBRUFBLGNBQWMsdUJBQVc7QUFDdkIsT0FBS0Msa0JBQUwsR0FBMEIsK0JBQTFCO0FBQ0QsQ0FGRDs7QUFJQUQsWUFBWUUsU0FBWixDQUFzQkMsT0FBdEIsR0FBZ0MsVUFBU0MsUUFBVCxFQUFtQkMsUUFBbkIsRUFBNkI7QUFDM0QsU0FBTyxpQkFBT0MsSUFBUCxDQUFZQyxNQUFaLENBQW1CLEVBQUVILGtCQUFGLEVBQVlDLGtCQUFaLEVBQW5CLENBQVA7QUFDRCxDQUZEOztBQUlBTCxZQUFZRSxTQUFaLENBQXNCTSxLQUF0QixHQUE4QixVQUFTSixRQUFULEVBQW1CQyxRQUFuQixFQUE2QjtBQUFBOztBQUN6RCxTQUFPLGlCQUFPQyxJQUFQLENBQVlHLE9BQVosQ0FBb0IsRUFBRUMsT0FBTyxFQUFFTixrQkFBRixFQUFZQyxrQkFBWixFQUFULEVBQXBCLEVBQ0pNLElBREksQ0FDQyxVQUFDQyxJQUFELEVBQVU7QUFDZCxRQUFJQSxRQUFRQSxLQUFLQyxHQUFMLEVBQVosRUFBd0I7QUFDdEIsYUFBTyxNQUFLWixrQkFBTCxDQUF3QmEsWUFBeEIsQ0FBcUNGLEtBQUtDLEdBQUwsR0FBV0UsRUFBaEQsRUFDSkosSUFESSxDQUNDLFVBQUNLLFdBQUQsRUFBaUI7QUFDckJKLGFBQUtDLEdBQUwsR0FBV0csV0FBWCxHQUF5QkEsWUFBWUgsR0FBWixFQUF6QjtBQUNBLGVBQU9ELElBQVA7QUFDSCxPQUpNLENBQVA7QUFLRCxLQU5ELE1BTU87QUFDTCxZQUFNSyx5QkFBTjtBQUNEO0FBQ0YsR0FYSSxFQVlKTixJQVpJLENBWUMsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQVY7QUFBQSxHQVpELENBQVA7QUFhRCxDQWREOztBQWdCQVosWUFBWUUsU0FBWixDQUFzQmdCLElBQXRCLEdBQTZCLFVBQVNDLE1BQVQsRUFBaUI7QUFDNUMsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWEEsYUFBUyxFQUFUO0FBQ0Q7QUFDRCxTQUFPLGlCQUFPYixJQUFQLENBQVlZLElBQVosQ0FBaUJDLE1BQWpCLENBQVA7QUFDRCxDQUxEOztBQU9BbkIsWUFBWUUsU0FBWixDQUFzQmtCLE1BQXRCLEdBQStCLFVBQVNKLFdBQVQsRUFBc0I7QUFDbkQsU0FBTyxpQkFBT1YsSUFBUCxDQUFZWSxJQUFaLENBQWlCLEVBQUVHLFNBQVMsQ0FBQztBQUNoQ0MsYUFBTyxpQkFBT04sV0FEa0I7QUFFaENOLGFBQU8sRUFBRWEsT0FBT1AsV0FBVDtBQUZ5QixLQUFEO0FBQVgsR0FBakIsQ0FBUDtBQUtELENBTkQ7O0FBUUE7O0FBRUEsU0FBU0MsdUJBQVQsR0FBbUM7QUFDakMsTUFBTU8sUUFBUSxJQUFJQyxLQUFKLENBQVUsMkJBQVYsQ0FBZDtBQUNBRCxRQUFNRSxJQUFOLEdBQWEsMkJBQWI7QUFDQSxTQUFPRixLQUFQO0FBQ0Q7O0FBRURHLE9BQU9DLE9BQVAsQ0FBZTVCLFdBQWYsR0FBNkJBLFdBQTdCIiwiZmlsZSI6InVzZXIuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2RlbHMgZnJvbSAnLi4vLi4vLi4vbW9kZWxzJztcclxuaW1wb3J0IHsgQWNjZXNzVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vaW5kZXgnO1xyXG5cclxudmFyIFVzZXJTZXJ2aWNlO1xyXG5cclxuVXNlclNlcnZpY2UgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmFjY2Vzc1Rva2VuU2VydmljZSA9IG5ldyBBY2Nlc3NUb2tlblNlcnZpY2UoKTtcclxufTtcclxuXHJcblVzZXJTZXJ2aWNlLnByb3RvdHlwZS5hZGRVc2VyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgcmV0dXJuIG1vZGVscy5Vc2VyLmNyZWF0ZSh7IHVzZXJuYW1lLCBwYXNzd29yZCB9KTtcclxufTtcclxuXHJcblVzZXJTZXJ2aWNlLnByb3RvdHlwZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gIHJldHVybiBtb2RlbHMuVXNlci5maW5kT25lKHsgd2hlcmU6IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH19KVxyXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcclxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5nZXQoKSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuU2VydmljZS5hZGRVc2VyVG9rZW4odXNlci5nZXQoKS5pZClcclxuICAgICAgICAgIC50aGVuKChhY2Nlc3NUb2tlbikgPT4ge1xyXG4gICAgICAgICAgICB1c2VyLmdldCgpLmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW4uZ2V0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUludmFsaWRMb2dpbkVycm9yKCk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAudGhlbigodXNlcikgPT4gdXNlcik7XHJcbn07XHJcblxyXG5Vc2VyU2VydmljZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKGZpbHRlcikge1xyXG4gIGlmICghZmlsdGVyKSB7XHJcbiAgICBmaWx0ZXIgPSB7fTtcclxuICB9XHJcbiAgcmV0dXJuIG1vZGVscy5Vc2VyLmZpbmQoZmlsdGVyKTtcclxufTtcclxuXHJcblVzZXJTZXJ2aWNlLnByb3RvdHlwZS5maW5kTWUgPSBmdW5jdGlvbihhY2Nlc3NUb2tlbikge1xyXG4gIHJldHVybiBtb2RlbHMuVXNlci5maW5kKHsgaW5jbHVkZTogW3sgXHJcbiAgICAgIG1vZGVsOiBtb2RlbHMuYWNjZXNzVG9rZW4sXHJcbiAgICAgIHdoZXJlOiB7IHRva2VuOiBhY2Nlc3NUb2tlbiB9XHJcbiAgICB9XVxyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gaGVscGVyc1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlSW52YWxpZExvZ2luRXJyb3IoKSB7XHJcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0ludmFsaWQgbG9naW4gY3JlZGVudGlhbHMnKTtcclxuICBlcnJvci5uYW1lID0gJ0lOVkFMSURfTE9HSU5fQ1JFREVOVElBTFMnO1xyXG4gIHJldHVybiBlcnJvcjtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMuVXNlclNlcnZpY2UgPSBVc2VyU2VydmljZTsiXX0=